# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/GoogleCloudPlatform/github-actions/tree/master/example-workflows/gke

name: Test on GKE
on: push

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: guides-tests
  GKE_ZONE: europe-west1-b
  # to allow add-path and set-env commands that are used by setup-gcloud@0.1.3
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  run-tests:
    name: Run Intergrational tests on GKE
    runs-on: ubuntu-latest
    continue-on-error: true

    outputs:
      master_ip: ${{ steps.master-ip.outputs.ip }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true 

    - run: |-
        gcloud components install kubectl

    - run: |-
        gcloud container clusters get-credentials --region="$GKE_ZONE" "$GKE_CLUSTER"

    - run: |-
        kubectl config use-context $(kubectl config get-contexts -o name)

    - name: Apply RBAC
      run: |-
        kubectl apply -f rbac.yaml

    - name: Deploy Hazelcast cluster
      run: |-
        kubectl apply -f hazelcast-cluster.yaml

    - name: Wait for deployment to finish
      run: |-
        kubectl wait --for=condition=ready pod -l app=hazelcast --all --timeout=60s

    - name: Creating LoadBalancer for each pods
      run: |-
        for pod in $(kubectl get pods -o jsonpath="{.items[*].metadata.name}"); do \
          kubectl create service loadbalancer ${pod} --tcp=5701 -o yaml --dry-run | kubectl set selector --local -f - "statefulset.kubernetes.io/pod-name=${pod}" -o yaml | kubectl create -f -; \
          kubectl label service ${pod} test=true
        done;

    - name: Fetch k8s master IP
      id: master-ip
      run: |-
        kubectl cluster-info | grep master | sed 's/.*\at //'
        ip=$(kubectl cluster-info | grep master | sed 's/.*\at //')
        echo "::set-output name=ip::$ip"

  run-maven:
    name: Run Maven tests
    runs-on: ubuntu-latest
    needs: run-tests

    steps:

      - run: |-
          echo "${{ needs.run-tests.outputs.master_ip }}"

  cleanup:
    name: Clean up
    runs-on: ubuntu-latest

    # wait until run-tests finishes but run the cleanup even if it fails
    needs: run-tests
    if: true

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - run: |-
        gcloud components install kubectl

    - run: |-
        gcloud container clusters get-credentials --region="$GKE_ZONE" "$GKE_CLUSTER"

    - run: |-
        kubectl config use-context $(kubectl config get-contexts -o name)

    - name: Clean up service
      run: |-
        kubectl delete svc --selector='test=true'
      continue-on-error: true

    - name: Clean up RBAC
      run: |-
        kubectl delete -f rbac.yaml --ignore-not-found=true
      continue-on-error: true

    - name: Clean up StatefulSet
      run: |-
        kubectl delete -f hazelcast-cluster.yaml --ignore-not-found=true
      continue-on-error: true
