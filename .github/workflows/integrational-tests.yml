name: Test on GKE
on:
  push:
    paths-ignore:
      - 'doc/**'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_ZONE: europe-west1-b
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
  HAZELCAST_VERSION: 4.2

jobs:
  run-tests:
    name: Run Intergrational tests on GKE
    runs-on: ubuntu-latest
    continue-on-error: true

    outputs:
      master_ip: ${{ steps.master-ip.outputs.ip }}
      api_token: ${{ steps.secrets.outputs.apiToken }}
      ca_certificate: ${{ steps.secrets.outputs.caCertificate }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2


    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true 

    - run: |-
        gcloud components install kubectl

    - run: |-
        repoName=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $NF}')
        clusterName="$repoName-$GITHUB_RUN_NUMBER"
        echo "clusterName=$clusterName" >> $GITHUB_ENV
        gcloud container clusters create "$clusterName" --zone="$GKE_ZONE" --project="$PROJECT_ID" --machine-type=n1-standard-2 --num-nodes=2

    - run: |-
        gcloud container clusters get-credentials --region="$GKE_ZONE" "$clusterName"

    - run: |-
        kubectl config use-context $(kubectl config get-contexts -o name)

    - name: Deploy Hazelcast cluster
      run: |-
        kubectl apply -f https://raw.githubusercontent.com/hazelcast/hazelcast-kubernetes/master/rbac.yaml

        kubectl create service loadbalancer hz-hazelcast-0 --tcp=5701
        kubectl run hz-hazelcast-0 --image=hazelcast/hazelcast:$HAZELCAST_VERSION --port=5701 -l "app=hz-hazelcast-0,role=hazelcast"
        kubectl create service loadbalancer hz-hazelcast-1 --tcp=5701
        kubectl run hz-hazelcast-1 --image=hazelcast/hazelcast:$HAZELCAST_VERSION --port=5701 -l "app=hz-hazelcast-1,role=hazelcast"
        kubectl create service loadbalancer hz-hazelcast-2 --tcp=5701
        kubectl run hz-hazelcast-2 --image=hazelcast/hazelcast:$HAZELCAST_VERSION --port=5701 -l "app=hz-hazelcast-2,role=hazelcast"

        kubectl create service loadbalancer hz-hazelcast --tcp=5701 -o yaml --dry-run=client | kubectl set selector --local -f - "role=hazelcast" -o yaml | kubectl create -f -

    - name: Wait for deployment to finish
      run: |-
        kubectl wait --for=condition=ready pod/hz-hazelcast-0 --timeout=120s
        kubectl wait --for=condition=ready pod/hz-hazelcast-1 --timeout=120s
        kubectl wait --for=condition=ready pod/hz-hazelcast-2 --timeout=120s

    - name: Wait for external IP to get assigned
      run: |-
        while [ $(kubectl get svc hz-hazelcast --output="jsonpath={.status.loadBalancer.ingress[0].ip}") = "" ]; do
          sleep 10
        done
    
    - name: Fetch Load Balancer IP
      run: |-
        EXTERNAL_IP=$(kubectl get svc hz-hazelcast --output="jsonpath={.status.loadBalancer.ingress[0].ip}")
        echo "EXTERNAL_IP=${EXTERNAL_IP}" >> $GITHUB_ENV


    - name: Test Java Client
      run: |-
        EXTERNAL_IP="${{ env.EXTERNAL_IP }}"
        cd java
        sed -i "s/<EXTERNAL-IP>/$EXTERNAL_IP/g" src/main/java/com/hazelcast/Main.java
        mvn package
        java -jar target/*jar-with-dependencies*.jar >> output-java.txt &
        PID=$!
        sleep 10
        kill $PID

        cat output-java.txt | grep 'Successful connection!' -q

    # Clean up
    - name: Delete cluster
      run: |-
        gcloud container clusters delete "$clusterName" --zone="$GKE_ZONE" --quiet

    - name: Clean up of failure
      if: ${{ failure() }}
      run: |-
        gcloud container clusters delete "$clusterName" --zone="$GKE_ZONE" --quiet
        exit 1
