name: Test on GKE
on:
  push:
    paths-ignore:
      - 'doc/**'

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_ZONE: europe-west1-b
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  run-tests:
    name: Run Intergrational tests on GKE
    runs-on: ubuntu-latest
    continue-on-error: true

    outputs:
      master_ip: ${{ steps.master-ip.outputs.ip }}
      api_token: ${{ steps.secrets.outputs.apiToken }}
      ca_certificate: ${{ steps.secrets.outputs.caCertificate }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2


    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true 

    - run: |-
        gcloud components install kubectl

    - run: |-
        repoName=$(echo $GITHUB_REPOSITORY | awk -F/ '{print $NF}')
        clusterName="$repoName-$GITHUB_RUN_NUMBER"
        echo "clusterName=$clusterName" >> $GITHUB_ENV
        gcloud container clusters create "$clusterName" --zone="$GKE_ZONE" --project="$PROJECT_ID" --machine-type=n1-standard-2 --num-nodes=2

    - run: |-
        gcloud container clusters get-credentials --region="$GKE_ZONE" "$clusterName"

    - run: |-
        kubectl config use-context $(kubectl config get-contexts -o name)

    - name: Apply RBAC
      run: |-
        kubectl apply -f rbac.yaml

    - name: Deploy Hazelcast cluster
      run: |-
        kubectl apply -f hazelcast-cluster.yaml

    - name: Wait for deployment to finish
      run: |-
        kubectl wait --for=condition=ready pod/hazelcast-0 --timeout=120s
        kubectl wait --for=condition=ready pod/hazelcast-1 --timeout=120s
        kubectl wait --for=condition=ready pod/hazelcast-2 --timeout=120s

    - name: Creating LoadBalancer for each pods
      run: |-
        for pod in $(kubectl get pods -o jsonpath="{.items[*].metadata.name}"); do \
          kubectl create service loadbalancer ${pod} --tcp=5701 -o yaml --dry-run | kubectl set selector --local -f - "statefulset.kubernetes.io/pod-name=${pod}" -o yaml | kubectl create -f -; \
          kubectl label service ${pod} test=true; \
        done;

    - name: Fetch k8s master IP
      id: master-ip
      run: |-
        ip=$(kubectl cluster-info | grep master | awk -Fat '{gsub(/ /, "", $0); print $NF}')
        echo "masterIp=$ip" >> $GITHUB_ENV

    - name: Run Maven tests
      run: |-
        secret=$(kubectl get secret -o name | grep hazelcast)
        apiToken=$(kubectl get $secret -o jsonpath={.data.token} | base64 --decode | xargs echo)
        caCertificate=$(kubectl get $secret -o jsonpath='{.data.ca\.crt}' | base64 --decode)

        KUBERNETES_MASTER="$masterIp" API_TOKEN=$apiToken CA_CERTIFICATE=$caCertificate mvn test -q
      timeout-minutes: 10

    # Clean up
    - name: Delete cluster
      run: |-
        gcloud container clusters delete "$clusterName" --zone="$GKE_ZONE" --quiet

    - name: Clean up of failure
      if: ${{ failure() }}
      run: |-
        gcloud container clusters delete "$clusterName" --zone="$GKE_ZONE" --quiet
        exit 1
